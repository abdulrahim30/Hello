# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NTnvu419zWL_hdXD0mx_KN4BLt0fV_ud
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from xgboost import XGBRegressor
# File uploader
uploaded_file = st.file_uploader('car_prices_1.csv', type="csv")

if uploaded_file is not None:
    # Read the CSV file
    df = pd.read_csv(uploaded_file)

# Handle timezone offsets before converting to datetime
df['saledate'] = pd.to_datetime(df['saledate'], utc=True) # Force all datetimes to UTC

# Convert to datetime (should work now without errors)
df['saledate'] = df['saledate'].dt.tz_localize(None) # Remove timezone information

# Feature: Sale Year, Month, Day
df['sale_year'] = df['saledate'].dt.year
df['sale_month'] = df['saledate'].dt.month
df['sale_day'] = df['saledate'].dt.day

# Feature: Car Age
df['car_age'] = df['sale_year'] - df['year']

# Feature: Price per Mile (Selling Price / Odometer)
df['price_per_mile'] = df['sellingprice'] / df['odometer']

# Feature: Price Difference from MMR (Selling Price - MMR)
df['price_diff_mmr'] = df['sellingprice'] - df['mmr']

# Feature: Odometer per Year (Odometer / Car Age)
# Ensure car_age is not zero to avoid division by zero
df['odometer_per_year'] = df.apply(lambda x: x['odometer'] / x['car_age'] if x['car_age'] != 0 else 0, axis=1)


# Selected features for the model
features = [
    'year', 'make', 'model', 'trim', 'body', 'transmission',
    'state', 'condition', 'odometer', 'color', 'interior',
    'seller', 'mmr', 'car_age'
]
target = 'sellingprice'

X = df[features]
y = df[target]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Preprocessing pipeline
numerical_features = ['year', 'odometer', 'mmr', 'car_age']
categorical_features = [
    'make', 'model', 'trim', 'body', 'transmission', 'state',
    'condition', 'color', 'interior', 'seller'
]

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

xgb_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', XGBRegressor(random_state=42))
])

# Fit the model
xgb_pipeline.fit(X_train, y_train)

df['year'] = df['year'].astype(str)
df['make'] = df['make'].astype(str)
df['model'] = df['model'].astype(str)
df['trim'] = df['trim'].astype(str)
df['body'] = df['body'].astype(str)
df['transmission'] = df['transmission'].astype(str)
df['vin'] = df['vin'].astype(str)
df['state'] = df['state'].astype(str)
df['condition'] = df['condition'].astype(str)
df['odometer'] = df['odometer'].astype(str)
df['color'] = df['color'].astype(str)
df['interior'] = df['interior'].astype(str)
df['seller'] = df['seller'].astype(str)
df['mmr'] = df['mmr'].astype(str)
df['sellingprice'] = df['sellingprice'].astype(str)
df['saledate'] = df['saledate'].astype(str)
# Streamlit UI
st.title("Car Price Prediction")

st.write(f"Year: {year}")
st.write(f"Make: {make}")
st.write(f"Model: {model}")
st.write(f"Trim: {trim}")
st.write(f"Body: {body}")
st.write(f"Transmission: {transmission}")
st.write(f"VIN: {vin}")
st.write(f"State: {state}")
st.write(f"Condition: {condition}")
st.write(f"Odometer: {odometer}")
st.write(f"Color: {color}")
st.write(f"Interior: {interior}")
st.write(f"Seller: {seller}")
st.write(f"MMR: {mmr}")
st.write(f"Selling Price: {sellingprice}")
st.write(f"Sale Date: {saledate}")


# Input fields for user input
year = st.number_input("Year", min_value=1900, max_value=2024, value=2020)
make = st.selectbox("Make", sorted(df['make'].unique()))
model = st.selectbox("Model", sorted(df['model'].unique()))
trim = st.selectbox("Trim", sorted(df['trim'].unique()))
body = st.selectbox("Body", sorted(df['body'].unique()))
transmission = st.selectbox("Transmission", sorted(df['transmission'].unique()))
state = st.selectbox("State", sorted(df['state'].unique()))
condition = st.selectbox("Condition", sorted(df['condition'].unique()))
odometer = st.number_input("Odometer", min_value=0, value=10000)
color = st.selectbox("Color", sorted(df['color'].unique()))
interior = st.selectbox("Interior", sorted(df['interior'].unique()))
seller = st.selectbox("Seller", sorted(df['seller'].unique()))
mmr = st.number_input("MMR", min_value=0, value=150)