# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NTnvu419zWL_hdXD0mx_KN4BLt0fV_ud
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from xgboost import XGBRegressor

# Streamlit UI
st.title("Car Price Prediction")

# Upload CSV file
uploaded_file = st.file_uploader("Upload your car prices CSV file", type='csv')

if uploaded_file is not None:
    # Load dataset
    df = pd.read_csv(uploaded_file)

    # Handle timezone offsets before converting to datetime
    df['saledate'] = pd.to_datetime(df['saledate'], utc=True)  # Force all datetimes to UTC
    df['saledate'] = df['saledate'].dt.tz_localize(None)  # Remove timezone information

    # Feature Engineering
    df['sale_year'] = df['saledate'].dt.year
    df['sale_month'] = df['saledate'].dt.month
    df['sale_day'] = df['saledate'].dt.day
    df['car_age'] = df['sale_year'] - df['year']
    df['price_per_mile'] = df['sellingprice'] / df['odometer']
    df['price_diff_mmr'] = df['sellingprice'] - df['mmr']
    df['odometer_per_year'] = df.apply(lambda x: x['odometer'] / x['car_age'] if x['car_age'] != 0 else 0, axis=1)

    # Ensure all values are strings for the selectbox options
    df = df.astype(str)

    # Selected features and target
    features = [
        'year', 'make', 'model', 'trim', 'body', 'transmission',
        'state', 'condition', 'odometer', 'color', 'interior',
        'seller', 'mmr', 'car_age'
    ]
    target = 'sellingprice'

    X = df[features]
    y = df[target]

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Preprocessing pipeline
    numerical_features = ['year', 'odometer', 'mmr', 'car_age']
    categorical_features = [
        'make', 'model', 'trim', 'body', 'transmission', 'state',
        'condition', 'color', 'interior', 'seller'
    ]

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), numerical_features),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ])

    xgb_pipeline = Pipeline([
        ('preprocessor', preprocessor),
        ('regressor', XGBRegressor(random_state=42))
    ])

    # Fit the model
    xgb_pipeline.fit(X_train, y_train)

    # Input fields for user input
    year = st.number_input("Year", min_value=1900, max_value=2024, value=2020)
    make = st.selectbox("Make", sorted(df['make'].unique()))
    model = st.selectbox("Model", sorted(df['model'].unique()))
    trim = st.selectbox("Trim", sorted(df['trim'].unique()))
    body = st.selectbox("Body", sorted(df['body'].unique()))
    transmission = st.selectbox("Transmission", sorted(df['transmission'].unique()))
    state = st.selectbox("State", sorted(df['state'].unique()))
    condition = st.selectbox("Condition", sorted(df['condition'].unique()))
    odometer = st.number_input("Odometer", min_value=0, value=10000)
    color = st.selectbox("Color", sorted(df['color'].unique()))
    interior = st.selectbox("Interior", sorted(df['interior'].unique()))
    seller = st.selectbox("Seller", sorted(df['seller'].unique()))
    mmr = st.number_input("MMR", min_value=0, value=150)

    # Create a DataFrame for prediction
    input_data = pd.DataFrame({
        'year': [year],
        'make': [make],
        'model': [model],
        'trim': [trim],
        'body': [body],
        'transmission': [transmission],
        'state': [state],
        'condition': [condition],
        'odometer': [odometer],
        'color': [color],
        'interior': [interior],
        'seller': [seller],
        'mmr': [mmr],
        'car_age': [year - pd.to_datetime(df['saledate']).dt.year.max()]
    })

    # Predict
    if st.button("Predict"):
        prediction = xgb_pipeline.predict(input_data)
        st.write(f"Predicted Selling Price: ${prediction[0]:,.2f}")
else:
    st.write("Please upload a CSV file.")