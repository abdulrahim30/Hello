# -*- coding: utf-8 -*-
"""air_quality_forecasting.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FncDeer3pGKB3aTp5rWZ4jNPwgC0K7uu
"""

!pip install streamlit

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

# Raw data
data = """
2023-05-30 23:00:00,23.161549648826565,54.659063611133824,15.243114756613686,21.190701133211455
2023-05-31 23:00:00,23.590365782473725,53.83545261951886,15.532399677778955,21.46162447312847
2023-06-01 23:00:00,23.848422835695565,52.99545248252751,15.759275952805408,21.778792286738756
2023-06-02 23:00:00,24.06030744367855,52.30268375895881,15.926165336828968,22.087592518292368
2023-06-03 23:00:00,23.595178121836655,52.60599582132419,15.538684515081922,21.79200499350826
2023-06-04 23:00:00,23.147630561084267,52.91500119286854,15.170779683068396,21.509215357955547
2023-06-05 23:00:00,22.603083704408444,53.31076067692183,14.761035651699284,21.17332628414035
2023-06-06 23:00:00,23.000148153002235,52.59120495624071,15.040780127951162,21.59654073484242
2023-06-07 23:00:00,22.955136986567112,52.49408008149221,14.99408438937882,21.693985145613553
2023-06-08 23:00:00,22.922509697295675,52.409858836905066,14.928410363920895,21.757094675780586
2023-06-09 23:00:00,22.927675065414952,52.35543152354075,14.854378270300536,21.804267949685457
2023-06-10 23:00:00,22.971383277032215,52.24737603695857,14.807348665014771,21.8714488371712
2023-06-11 23:00:00,23.086217492824345,52.004157507639974,14.852078661523189,22.033621544192236
2023-06-12 23:00:00,23.112552973536825,51.86344111812313,14.830339866933917,22.11793285964057
2023-06-13 23:00:00,23.057566422177096,51.83584595103207,14.749566922938596,22.128493248211843
2023-06-14 23:00:00,23.192532567311826,51.60553556679091,14.781688158006338,22.259479218504083
2023-06-15 23:00:00,23.114908046950916,51.61117921189298,14.693018044774924,22.251032025000704
2023-06-16 23:00:00,23.251151598769825,51.35599615495801,14.742308172003296,22.387752812840045
2023-06-17 23:00:00,23.305950022963323,51.257914118000194,14.718759982689072,22.44826309910665
2023-06-18 23:00:00,23.872440403915668,50.414401376297306,15.096804591082039,22.95120352526506
2023-06-19 23:00:00,23.603195590698057,50.754442280986936,14.823305865298385,22.73904320986321
2023-06-20 23:00:00,23.826535052801628,50.40412994221155,14.950126357856567,22.94780816689755
2023-06-21 23:00:00,23.868903148679305,50.292525731589194,14.973446540634795,23.049054373422017
2023-06-22 23:00:00,23.901987981799444,50.17505213006069,14.994973614869211,23.141682990013312
2023-06-23 23:00:00,23.903005262031567,50.09794639321824,15.001455514964006,23.212655896407863
2023-06-24 23:00:00,23.929166550923473,49.95442624081468,15.055791101110385,23.332556321918965
2023-06-25 23:00:00,24.120141172765262,49.58787374889359,15.256228389669785,23.625638181169832
2023-06-26 23:00:00,23.973267274776415,49.77161277375251,15.152223208274409,23.575418721909326
2023-06-27 23:00:00,23.752052952883787,50.037771591681974,15.012254881679727,23.467094080088042
2023-06-28 23:00:00,23.097695572521058,50.81948416205921,14.588056864546472,23.013916394890597
2023-06-29 23:00:00,22.37525473844945,51.575096002568415,14.157430691716192,22.526877307693166
2023-06-30 23:00:00,21.855289831492325,52.019083820205914,13.867929164341724,22.187302363564573
2023-07-01 23:00:00,21.887443319011812,51.846094810537416,13.896716618129556,22.198542941162984
2023-07-02 23:00:00,21.924757529535373,51.68256455005998,13.893312806270732,22.191766191348435
2023-07-03 23:00:00,22.017520480382565,51.42710608324403,13.912704762157341,22.208578173524392
2023-07-04 23:00:00,21.978071839417627,51.287098535552,13.845902104346226,22.13302272052194
2023-07-05 23:00:00,22.411312445307255,50.57831991955777,14.074411883341293,22.36414871723702
2023-07-06 23:00:00,22.853088450404773,49.874688307896626,14.299646511308564,22.613430313877764
2023-07-07 23:00:00,23.381990559035864,49.06136681003174,14.59213818154083,22.94655812751502
2023-07-08 23:00:00,23.656149904151135,48.603771035324144,14.712631492725073,23.104977923004582
2023-07-09 23:00:00,23.788533365226222,48.33531864002519,14.737894616913625,23.156570637103553
2023-07-10 23:00:00,23.663722266652035,48.393251330272174,14.673690618965928,23.06513842968491
2023-07-11 23:00:00,23.965134168926605,47.26917455287233,15.2173068430294,23.1297371587328
2023-07-12 23:00:00,24.948718244388623,46.61927579096264,15.460688364971432,24.062833519267542
2023-07-13 23:00:00,25.056394337634156,46.48515234255751,15.467717313124245,24.120984936223193
"""

# Convert raw data to a NumPy array
data_lines = data.strip().split("\n")
data_array = np.array([line.split(",")[1:] for line in data_lines], dtype=float)
dates = [line.split(",")[0] for line in data_lines]

# Convert NumPy array to DataFrame for better handling
df = pd.DataFrame(data_array, columns=['NO2', 'O3', 'PM2.5', 'PM10'], index=pd.to_datetime(dates))

# Streamlit app
st.title("Environmental Data Analysis")

# Date range selector
st.sidebar.header("Filter by Date")
start_date = st.sidebar.date_input("Start date", df.index.min())
end_date = st.sidebar.date_input("End date", df.index.max())

# Filter data based on selected date range
filtered_df = df[(df.index >= pd.Timestamp(start_date)) & (df.index <= pd.Timestamp(end_date))]

# Check if filtered data is empty
if filtered_df.empty:
    st.write("No data available for the selected date range.")
else:
    # Display the data as a table
    st.write("### Filtered Data Table")
    st.write(filtered_df)

    # Plot line charts
    st.write("### Line Chart of the Data")
    columns_to_plot = st.multiselect(
        "Select columns to plot:",
        options=['NO2', 'O3', 'PM2.5', 'PM10'],
        default=['NO2', 'O3', 'PM2.5', 'PM10']
    )
    if columns_to_plot:
        st.line_chart(filtered_df[columns_to_plot])

    # Add forecast functionality (for illustration purposes)
    st.write("### Forecasting")
    if st.button("Generate Forecast"):
        # Simple placeholder for forecasting functionality
        forecast_df = filtered_df.copy()
        forecast_df["Forecast"] = forecast_df.mean(axis=1) + np.random.normal(size=len(forecast_df))
        st.write(forecast_df)
        st.line_chart(forecast_df[['NO2', 'O3', 'PM2.5', 'PM10', 'Forecast']])

    # Save and download the filtered data
    def save_to_csv(df):
        buffer = BytesIO()
        df.to_csv(buffer, index=True)
        buffer.seek(0)
        return buffer.getvalue()

    csv_data = save_to_csv(filtered_df)
    st.download_button(
        label="Download Filtered Data as CSV",
        data=csv_data,
        file_name="filtered_data.csv",
        mime="text/csv"
    )